OutputNode
ProjectNode
TableScanNode
ValuesNode
AggregationNode
MarkDistinctNode
FilterNode
WindowNode
RowNumberNode
TopNRowNumberNode
LimitNode
DistinctLimitNode
TopNNode
SampleNode
SortNode
RemoteSourceNode
JoinNode
SemiJoinNode
IndexJoinNode
IndexSourceNode
TableWriterNode
DeleteNode
MetadataDeleteNode
TableCommitNode
UnnestNode
ExchangeNode
UnionNode


    /*
    public static abstract class Reactor
    {
        private final ReactorContext context;
        private final Optional<Reactor> destination;

        public Reactor(ReactorContext context, Optional<Reactor> destination)
        {
            this.context = context;
            this.destination = destination;
        }

        public ReactorContext getContext()
        {
            return context;
        }

        public Optional<Reactor> getDestination()
        {
            return destination;
        }

        public abstract void react(Event event);
    }
    */

    /*
    public static class ValuesNodeHandler
            extends Reactor<ValuesNode>
    {
        public ValuesNodeHandler(ValuesNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }

    public static class AggregationNodeHandler
            extends Reactor<AggregationNode>
    {
        public AggregationNodeHandler(AggregationNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return true;
        }
    }

    public static class MarkDistinctNodeHandler
            extends Reactor<MarkDistinctNode>
    {
        public MarkDistinctNodeHandler(MarkDistinctNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }

    public static class FilterNodeHandler
            extends Reactor<FilterNode>
    {
        public FilterNodeHandler(FilterNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class WindowNodeHandler
            extends Reactor<WindowNode>
    {
        public WindowNodeHandler(WindowNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class RowNumberNodeHandler
            extends Reactor<RowNumberNode>
    {
        public RowNumberNodeHandler(RowNumberNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class TopNRowNumberNodeHandler
            extends Reactor<TopNRowNumberNode>
    {
        public TopNRowNumberNodeHandler(TopNRowNumberNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }

    public static class LimitNodeHandler
            extends Reactor<LimitNode>
    {
        public LimitNodeHandler(LimitNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }

    public static class DistinctLimitNodeHandler
            extends Reactor<DistinctLimitNode>
    {
        public DistinctLimitNodeHandler(DistinctLimitNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }

    public static class TopNNodeHandler
            extends Reactor<TopNNode>
    {
        public TopNNodeHandler(TopNNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class SampleNodeHandler
            extends Reactor<SampleNode>
    {
        public SampleNodeHandler(SampleNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class SortNodeHandler
            extends Reactor<SortNode>
    {
        public SortNodeHandler(SortNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class RemoteSourceNodeHandler
            extends Reactor<RemoteSourceNode>
    {
        public RemoteSourceNodeHandler(RemoteSourceNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class JoinNodeHandler
            extends Reactor<JoinNode>
    {
        public JoinNodeHandler(JoinNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }

        @Override
        public Reactor getReactor(ReactorContext context)
        {
            return new ReactorImpl(
                    context.getKv(),
                    context.getKv()
            );
        }

        private class ReactorImpl extends Reactor
        {
            private final Kv<byte[], byte[]> pkJkKv;
            private final Kv<byte[], byte[]> jkPkPayloadKv;

            public ReactorImpl(Kv<byte[], byte[]> pkJkKv, Kv<byte[], byte[]> jkPkPayloadKv)
            {
                this.pkJkKv = pkJkKv;
                this.jkPkPayloadKv = jkPkPayloadKv;
            }

            @Override
            public void react(Event event)
            {

            }
        }
    }

    public static class SemiJoinNodeHandler
            extends Reactor<SemiJoinNode>
    {
        public SemiJoinNodeHandler(SemiJoinNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class IndexJoinNodeHandler
            extends Reactor<IndexJoinNode>
    {
        public IndexJoinNodeHandler(IndexJoinNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class IndexSourceNodeHandler
            extends Reactor<IndexSourceNode>
    {
        public IndexSourceNodeHandler(IndexSourceNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class TableWriterNodeHandler
            extends Reactor<TableWriterNode>
    {
        public TableWriterNodeHandler(TableWriterNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class DeleteNodeHandler
            extends Reactor<DeleteNode>
    {
        public DeleteNodeHandler(DeleteNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class MetadataDeleteNodeHandler
            extends Reactor<MetadataDeleteNode>
    {
        public MetadataDeleteNodeHandler(MetadataDeleteNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class TableCommitNodeHandler
            extends Reactor<TableCommitNode>
    {
        public TableCommitNodeHandler(TableCommitNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class UnnestNodeHandler
            extends Reactor<UnnestNode>
    {
        public UnnestNodeHandler(UnnestNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class ExchangeNodeHandler
            extends Reactor<ExchangeNode>
    {
        public ExchangeNodeHandler(ExchangeNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

    /*
    public static class UnionNodeHandler
            extends Reactor<UnionNode>
    {
        public UnionNodeHandler(UnionNode node, Optional<Reactor> destination)
        {
            super(node, destination);
        }

        @Override
        public boolean isBlocking()
        {
            return false;
        }
    }
    */

//        else if (node instanceof ValuesNode) {
//            return new ValuesNodeHandler((ValuesNode) node, destination);
//        }
//        else if (node instanceof AggregationNode) {
//            return new AggregationNodeHandler((AggregationNode) node, destination);
//        }
//        else if (node instanceof MarkDistinctNode) {
//            return new MarkDistinctNodeHandler((MarkDistinctNode) node, destination);
//        }
//        else if (node instanceof FilterNode) {
//            return new FilterNodeHandler((FilterNode) node, destination);
//        }
//        else if (node instanceof WindowNode) {
//            return new WindowNodeHandler((WindowNode) node, destination);
//        }
//        else if (node instanceof RowNumberNode) {
//            return new RowNumberNodeHandler((RowNumberNode) node, destination);
//        }
//        else if (node instanceof TopNRowNumberNode) {
//            return new TopNRowNumberNodeHandler((TopNRowNumberNode) node, destination);
//        }
//        else if (node instanceof LimitNode) {
//            return new LimitNodeHandler((LimitNode) node, destination);
//        }
//        else if (node instanceof DistinctLimitNode) {
//            return new DistinctLimitNodeHandler((DistinctLimitNode) node, destination);
//        }
//        else if (node instanceof TopNNode) {
//            return new TopNNodeHandler((TopNNode) node, destination);
//        }
//        else if (node instanceof SampleNode) {
//            return new SampleNodeHandler((SampleNode) node, destination);
//        }
//        else if (node instanceof SortNode) {
//            return new SortNodeHandler((SortNode) node, destination);
//        }
//        else if (node instanceof RemoteSourceNode) {
//            return new RemoteSourceNodeHandler((RemoteSourceNode) node, destination);
//        }
//        else if (node instanceof JoinNode) {
//            return new JoinNodeHandler((JoinNode) node, destination);
//        }
//        else if (node instanceof SemiJoinNode) {
//            return new SemiJoinNodeHandler((SemiJoinNode) node, destination);
//        }
//        else if (node instanceof IndexJoinNode) {
//            return new IndexJoinNodeHandler((IndexJoinNode) node, destination);
//        }
//        else if (node instanceof IndexSourceNode) {
//            return new IndexSourceNodeHandler((IndexSourceNode) node, destination);
//        }
//        else if (node instanceof TableWriterNode) {
//            return new TableWriterNodeHandler((TableWriterNode) node, destination);
//        }
//        else if (node instanceof DeleteNode) {
//            return new DeleteNodeHandler((DeleteNode) node, destination);
//        }
//        else if (node instanceof MetadataDeleteNode) {
//            return new MetadataDeleteNodeHandler((MetadataDeleteNode) node, destination);
//        }
//        else if (node instanceof TableCommitNode) {
//            return new TableCommitNodeHandler((TableCommitNode) node, destination);
//        }
//        else if (node instanceof UnnestNode) {
//            return new UnnestNodeHandler((UnnestNode) node, destination);
//        }
//        else if (node instanceof ExchangeNode) {
//            return new ExchangeNodeHandler((ExchangeNode) node, destination);
//        }
//        else if (node instanceof UnionNode) {
//            return new UnionNodeHandler((UnionNode) node, destination);
//        }

































diff --git a/presto-wrmsr-main/src/test/java/com/wrmsr/presto/reactor/TestPkThreader.java b/presto-wrmsr-main/src/test/java/com/wrmsr/presto/reactor/TestPkThreader.java
index 3fc8638..fe9947c 100644
--- a/presto-wrmsr-main/src/test/java/com/wrmsr/presto/reactor/TestPkThreader.java
+++ b/presto-wrmsr-main/src/test/java/com/wrmsr/presto/reactor/TestPkThreader.java
@@ -40,6 +40,7 @@ import com.facebook.presto.spi.ConnectorTableHandle;
 import com.facebook.presto.spi.SchemaTableName;
 import com.facebook.presto.spi.predicate.TupleDomain;
 import com.facebook.presto.spi.type.BigintType;
+import com.facebook.presto.spi.type.BooleanType;
 import com.facebook.presto.spi.type.Type;
 import com.facebook.presto.spi.type.VarbinaryType;
 import com.facebook.presto.sql.planner.PlanNodeIdAllocator;
@@ -58,10 +59,13 @@ import com.facebook.presto.sql.planner.plan.PlanVisitor;
 import com.facebook.presto.sql.planner.plan.ProjectNode;
 import com.facebook.presto.sql.planner.plan.SimplePlanRewriter;
 import com.facebook.presto.sql.planner.plan.TableScanNode;
+import com.facebook.presto.sql.tree.BooleanLiteral;
 import com.facebook.presto.sql.tree.Expression;
 import com.facebook.presto.sql.tree.FunctionCall;
+import com.facebook.presto.sql.tree.LogicalBinaryExpression;
 import com.facebook.presto.sql.tree.QualifiedNameReference;
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 import org.intellij.lang.annotations.Language;
@@ -148,11 +152,13 @@ public class TestPkThreader
         public static class Context
         {
             private final Map<PlanNodeId, List<Symbol>> nodePkSyms;
+            private final Map<PlanNodeId, List<Symbol>> nodePresentSyms;
             private final List<Context> children;

             public Context()
             {
                 nodePkSyms = newHashMap();
+                nodePresentSyms = newHashMap();
                 children = newArrayList();
             }
         }
@@ -163,11 +169,24 @@ public class TestPkThreader
             throw new UnsupportedPlanNodeException(node);
         }

+        private static Expression andExprs(List<Expression> exprs)
+        {
+            checkArgument(!exprs.isEmpty());
+            Expression expr = exprs.get(0);
+            for (int i = 1; i < exprs.size(); ++i){
+                expr = new LogicalBinaryExpression(LogicalBinaryExpression.Type.AND, expr, exprs.get(1));
+            }
+            return expr;
+        }
+
         @Override
         public PlanNode visitProject(ProjectNode node, Context context)
         {
             PlanNode newSource = node.getSource().accept(this, context);
             List<Symbol> pkSyms = context.nodePkSyms.get(newSource.getId());
+            checkState(!pkSyms.isEmpty());
+            List<Symbol> presentSyms = context.nodePresentSyms.get(newSource.getId());
+            checkState(!presentSyms.isEmpty());

             Set<QualifiedNameReference> pkQnrs = pkSyms.stream().map(Symbol::toQualifiedNameReference).collect(toImmutableSet());
             Set<Symbol> identityAssignments = node.getAssignments().entrySet().stream().filter(e -> pkQnrs.contains(e.getValue())).map(Map.Entry::getKey).collect(toImmutableSet());
@@ -179,11 +198,22 @@ public class TestPkThreader
                 }
             }

-            ProjectNode newNode = new ProjectNode(
+            Symbol newPresentSym;
+            if (presentSyms.size() == 1) {
+                newPresentSym = presentSyms.get(0);
+            }
+            else {
+                newPresentSym = symbolAllocator.newSymbol("present", BooleanType.BOOLEAN);
+                Expression presentExpr = andExprs(presentSyms.stream().map(Symbol::toQualifiedNameReference).collect(toImmutableList()));
+                newAssignments.put(newPresentSym, presentExpr);
+            }
+
+            PlanNode newNode = new ProjectNode(
                     node.getId(),
                     newSource,
                     newAssignments);
             context.nodePkSyms.put(newNode.getId(), pkSyms);
+            context.nodePresentSyms.put(newNode.getId(), ImmutableList.of(newPresentSym));
             return newNode;
         }

@@ -192,12 +222,26 @@ public class TestPkThreader
         {
             PlanNode newSource = node.getSource().accept(this, context);
             List<Symbol> pkSyms = context.nodePkSyms.get(newSource.getId());
+            checkState(!pkSyms.isEmpty());
+            List<Symbol> presentSyms = context.nodePresentSyms.get(newSource.getId());
+            checkState(!presentSyms.isEmpty());
+
+            Map<Symbol, Expression> newAssignments = newHashMap();
+            newSource.getOutputSymbols().stream().forEach(s -> newAssignments.put(s, s.toQualifiedNameReference()));

-            FilterNode newNode = new FilterNode(
+            Symbol newPresentSym = symbolAllocator.newSymbol("present", BooleanType.BOOLEAN);
+            Expression presentExpr = andExprs(ImmutableList.<Expression>builder()
+                    .addAll(presentSyms.stream().map(Symbol::toQualifiedNameReference).collect(toImmutableList()))
+                    .add(node.getPredicate())
+                    .build());
+            newAssignments.put(newPresentSym, presentExpr);
+
+            PlanNode newNode = new ProjectNode(
                     node.getId(),
-                    node.getSource(),
-                    node.getPredicate());
+                    newSource,
+                    newAssignments);
             context.nodePkSyms.put(newNode.getId(), pkSyms);
+            context.nodePresentSyms.put(newNode.getId(), ImmutableList.of(newPresentSym));
             return newNode;
         }

@@ -231,7 +275,7 @@ public class TestPkThreader
                     .build();
             checkState(pkSyms.size() == newHashSet(pkSyms).size());

-            JoinNode newNode = new JoinNode(
+            PlanNode newNode = new JoinNode(
                     node.getId(),
                     node.getType(),
                     newLeft,
@@ -249,7 +293,7 @@ public class TestPkThreader
                     pkSyms);
             indexPopulationQuery = optimize(indexPopulationQuery);

-            urggh
+            // urggh

             if (!rightJkSyms.isEmpty()) {
                 // lpk -> [rpk]
@@ -281,11 +325,15 @@ public class TestPkThreader
         {
             PlanNode newSource = node.getSource().accept(this, context);
             List<Symbol> pkSyms = context.nodePkSyms.get(newSource.getId());
+            checkState(!pkSyms.isEmpty());
+            List<Symbol> presentSyms = context.nodePresentSyms.get(newSource.getId());
+            checkState(!presentSyms.isEmpty());

             Set<Symbol> outputSymbolSet = newHashSet(node.getOutputSymbols());

             List<String> newColumnNames = newArrayList(node.getColumnNames());
             List<Symbol> newOutputSymbols = newArrayList(node.getOutputSymbols());
+            newOutputSymbols.addAll(presentSyms);

             for (Symbol pkSym : pkSyms) {
                 if (!outputSymbolSet.contains(pkSym)) {
@@ -296,19 +344,21 @@ public class TestPkThreader
                 }
             }

-            OutputNode newNode = new OutputNode(
+            PlanNode newNode = new OutputNode(
                     node.getId(),
                     newSource,
                     newColumnNames,
                     newOutputSymbols);
             context.nodePkSyms.put(newNode.getId(), pkSyms);
+            context.nodePresentSyms.put(newNode.getId(), presentSyms);
             return newNode;
         }

         @Override
         public PlanNode visitTableScan(TableScanNode node, Context context)
         {
-            // FIXME (optional?) filter extraction - we (may?) only get deltas
+            // TODO: materialize all tables
+
             ConnectorSupport cs = connectorSupport.get(node.getTable().getConnectorId());
             Connector c = cs.getConnector();
             ConnectorSession csess = session.toConnectorSession();
@@ -338,15 +388,26 @@ public class TestPkThreader
                 }
             }

-            TableScanNode newNode = new TableScanNode(
+            PlanNode newNode = new TableScanNode(
                     node.getId(),
                     node.getTable(),
                     newOutputSymbols,
                     newAssignments,
                     node.getLayout(),
-                    node.getCurrentConstraint(),
+                    TupleDomain.<ColumnHandle>all(),
                     node.getOriginalConstraint());
             context.nodePkSyms.put(newNode.getId(), pkSyms);
+
+            Symbol newPresentSymbol = symbolAllocator.newSymbol("present", BooleanType.BOOLEAN);
+            newNode = new ProjectNode(
+                    idAllocator.getNextId(),
+                    newNode,
+                    ImmutableMap.<Symbol, Expression>builder()
+                            .putAll(newNode.getOutputSymbols().stream().map(s -> ImmutablePair.of(s, s.toQualifiedNameReference())).collect(toImmutableMap()))
+                            .put(newPresentSymbol, BooleanLiteral.TRUE_LITERAL)
+                            .build());
+            context.nodePkSyms.put(newNode.getId(), pkSyms);
+            context.nodePresentSyms.put(newNode.getId(), ImmutableList.of(newPresentSymbol));
             return newNode;
         }

@@ -454,7 +515,7 @@ public class TestPkThreader

             Map<Symbol, ColumnHandle> newAssignments = node.getOutputSymbols().stream().map(s -> ImmutablePair.of(s, dataTableColumnHandles.get(s.getName()))).collect(toImmutableMap());

-            TableScanNode newNode = new TableScanNode(
+            PlanNode newNode = new TableScanNode(
                     idAllocator.getNextId(),
                     dataTableHandle,
                     node.getOutputSymbols(),





            ConnectorSession css = session.toConnectorSession();
            ConnectorSupport cs = connectorSupport.get(leftIndexTableHandle.getConnectorId());
            Connector c = cs.getConnector();
            ConnectorMetadata cm = c.getMetadata();
            ConnectorTableMetadata ctm = cm.getTableMetadata(css, leftIndexTableHandle.getConnectorHandle());
            ConnectorOutputTableHandle coth = cm.beginCreateTable(css, ctm);
            RecordSink rs = c.getRecordSinkProvider().getRecordSink(css, coth);

