diff --git a/pom.xml b/pom.xml
index 204796a..b110db6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -87,6 +87,10 @@
         <module>presto-server</module>
         <module>presto-docs</module>
         <module>presto-verifier</module>
+        <module>presto-streaming</module>
+        <module>presto-wrmsr-elasticsearch</module>
+        <module>presto-wrmsr-extensions</module>
+        <module>presto-wrmsr-wrapper</module>
     </modules>
 
     <dependencyManagement>
diff --git a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/BaseJdbcClient.java b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/BaseJdbcClient.java
index 30b4772..9360f03 100644
--- a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/BaseJdbcClient.java
+++ b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/BaseJdbcClient.java
@@ -88,16 +88,17 @@ public class BaseJdbcClient
             .build();
 
     protected final String connectorId;
+    @Nullable
     protected final Driver driver;
     protected final String connectionUrl;
     protected final Properties connectionProperties;
     protected final String identifierQuote;
 
-    public BaseJdbcClient(JdbcConnectorId connectorId, BaseJdbcConfig config, String identifierQuote, Driver driver)
+    public BaseJdbcClient(JdbcConnectorId connectorId, BaseJdbcConfig config, String identifierQuote, @Nullable Driver driver)
     {
         this.connectorId = checkNotNull(connectorId, "connectorId is null").toString();
         this.identifierQuote = checkNotNull(identifierQuote, "identifierQuote is null");
-        this.driver = checkNotNull(driver, "driver is null");
+        this.driver = driver;
 
         checkNotNull(config, "config is null");
         connectionUrl = config.getConnectionUrl();
@@ -111,10 +112,15 @@ public class BaseJdbcClient
         }
     }
 
+    public Connection getConnection(String url, Properties info) throws SQLException
+    {
+        return checkNotNull(driver).connect(url, info);
+    }
+
     @Override
     public Set<String> getSchemaNames()
     {
-        try (Connection connection = driver.connect(connectionUrl, connectionProperties);
+        try (Connection connection = getConnection(connectionUrl, connectionProperties);
                 ResultSet resultSet = connection.getMetaData().getSchemas()) {
             ImmutableSet.Builder<String> schemaNames = ImmutableSet.builder();
             while (resultSet.next()) {
@@ -134,7 +140,7 @@ public class BaseJdbcClient
     @Override
     public List<SchemaTableName> getTableNames(@Nullable String schema)
     {
-        try (Connection connection = driver.connect(connectionUrl, connectionProperties)) {
+        try (Connection connection = getConnection(connectionUrl, connectionProperties)) {
             DatabaseMetaData metadata = connection.getMetaData();
             if (metadata.storesUpperCaseIdentifiers() && (schema != null)) {
                 schema = schema.toUpperCase(ENGLISH);
@@ -156,7 +162,7 @@ public class BaseJdbcClient
     @Override
     public JdbcTableHandle getTableHandle(SchemaTableName schemaTableName)
     {
-        try (Connection connection = driver.connect(connectionUrl, connectionProperties)) {
+        try (Connection connection = getConnection(connectionUrl, connectionProperties)) {
             DatabaseMetaData metadata = connection.getMetaData();
             String jdbcSchemaName = schemaTableName.getSchemaName();
             String jdbcTableName = schemaTableName.getTableName();
@@ -191,7 +197,7 @@ public class BaseJdbcClient
     @Override
     public List<JdbcColumnHandle> getColumns(JdbcTableHandle tableHandle)
     {
-        try (Connection connection = driver.connect(connectionUrl, connectionProperties)) {
+        try (Connection connection = getConnection(connectionUrl, connectionProperties)) {
             DatabaseMetaData metadata = connection.getMetaData();
             try (ResultSet resultSet = metadata.getColumns(tableHandle.getCatalogName(), tableHandle.getSchemaName(), tableHandle.getTableName(), null)) {
                 List<JdbcColumnHandle> columns = new ArrayList<>();
@@ -247,7 +253,7 @@ public class BaseJdbcClient
     public Connection getConnection(JdbcSplit split)
             throws SQLException
     {
-        Connection connection = driver.connect(split.getConnectionUrl(), toProperties(split.getConnectionProperties()));
+        Connection connection = getConnection(split.getConnectionUrl(), toProperties(split.getConnectionProperties()));
         try {
             connection.setReadOnly(true);
         }
@@ -258,6 +264,11 @@ public class BaseJdbcClient
         return connection;
     }
 
+    public String getIdentifierQuote()
+    {
+        return identifierQuote;
+    }
+
     @Override
     public String buildSql(JdbcSplit split, List<JdbcColumnHandle> columnHandles)
     {
@@ -280,7 +291,7 @@ public class BaseJdbcClient
             throw new PrestoException(NOT_FOUND, "Schema not found: " + schema);
         }
 
-        try (Connection connection = driver.connect(connectionUrl, connectionProperties)) {
+        try (Connection connection = getConnection(connectionUrl, connectionProperties)) {
             boolean uppercase = connection.getMetaData().storesUpperCaseIdentifiers();
             if (uppercase) {
                 schema = schema.toUpperCase(ENGLISH);
@@ -355,7 +366,7 @@ public class BaseJdbcClient
                 .append("DROP TABLE ")
                 .append(quoted(handle.getCatalogName(), handle.getSchemaName(), handle.getTableName()));
 
-        try (Connection connection = driver.connect(connectionUrl, connectionProperties)) {
+        try (Connection connection = getConnection(connectionUrl, connectionProperties)) {
             execute(connection, sql.toString());
         }
         catch (SQLException e) {
@@ -378,7 +389,7 @@ public class BaseJdbcClient
     public Connection getConnection(JdbcOutputTableHandle handle)
             throws SQLException
     {
-        return driver.connect(handle.getConnectionUrl(), toProperties(handle.getConnectionProperties()));
+        return getConnection(handle.getConnectionUrl(), toProperties(handle.getConnectionProperties()));
     }
 
     protected ResultSet getTables(Connection connection, String schemaName, String tableName)
diff --git a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordCursor.java b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordCursor.java
index 82c539d..51d5f16 100644
--- a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordCursor.java
+++ b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordCursor.java
@@ -52,21 +52,33 @@ public class JdbcRecordCursor
 
     private static final ISOChronology UTC_CHRONOLOGY = ISOChronology.getInstance(UTC);
 
-    private final List<JdbcColumnHandle> columnHandles;
+    protected final List<JdbcColumnHandle> columnHandles;
 
-    private final Connection connection;
-    private final Statement statement;
-    private final ResultSet resultSet;
-    private boolean closed;
+    protected final JdbcClient jdbcClient;
+    protected final JdbcSplit split;
+    protected Connection connection;
+    protected Statement statement;
+    protected ResultSet resultSet;
+    protected boolean closed;
 
     public JdbcRecordCursor(JdbcClient jdbcClient, JdbcSplit split, List<JdbcColumnHandle> columnHandles)
     {
+        this.jdbcClient = jdbcClient;
+        this.split = split;
         this.columnHandles = ImmutableList.copyOf(checkNotNull(columnHandles, "columnHandles is null"));
-
-        String sql = jdbcClient.buildSql(split, columnHandles);
         try {
             connection = jdbcClient.getConnection(split);
+        }
+        catch (SQLException e) {
+            throw handleSqlException(e);
+        }
+        begin();
+    }
 
+    protected void begin()
+    {
+        try {
+            String sql = jdbcClient.buildSql(split, columnHandles);
             statement = connection.createStatement();
             statement.setFetchSize(1000);
 
diff --git a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSet.java b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSet.java
index 378452b..68340d2 100644
--- a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSet.java
+++ b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSet.java
@@ -50,6 +50,21 @@ public class JdbcRecordSet
         return columnTypes;
     }
 
+    public JdbcClient getJdbcClient()
+    {
+        return jdbcClient;
+    }
+
+    public List<JdbcColumnHandle> getColumnHandles()
+    {
+        return columnHandles;
+    }
+
+    public JdbcSplit getSplit()
+    {
+        return split;
+    }
+
     @Override
     public RecordCursor cursor()
     {
diff --git a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSetProvider.java b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSetProvider.java
index c14f37b..6391da1 100644
--- a/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSetProvider.java
+++ b/presto-base-jdbc/src/main/java/com/facebook/presto/plugin/jdbc/JdbcRecordSetProvider.java
@@ -47,6 +47,11 @@ public class JdbcRecordSetProvider
             handles.add(checkType(handle, JdbcColumnHandle.class, "columnHandle"));
         }
 
-        return new JdbcRecordSet(jdbcClient, jdbcSplit, handles.build());
+        return createRecordSet(jdbcClient, jdbcSplit, handles.build());
+    }
+
+    protected RecordSet createRecordSet(JdbcClient jdbcClient, JdbcSplit split, List<JdbcColumnHandle> columnHandles)
+    {
+        return new JdbcRecordSet(jdbcClient, split, columnHandles);
     }
 }
diff --git a/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraClientConfig.java b/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraClientConfig.java
index 4b79d97..c92bf3f 100644
--- a/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraClientConfig.java
+++ b/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraClientConfig.java
@@ -268,7 +268,7 @@ public class CassandraClientConfig
     }
 
     @Config("cassandra.allow-drop-table")
-    @ConfigDescription("Allow hive connector to drop table")
+    @ConfigDescription("Allow cassandra connector to drop table")
     public CassandraClientConfig setAllowDropTable(boolean allowDropTable)
     {
         this.allowDropTable = allowDropTable;
diff --git a/presto-cli/pom.xml b/presto-cli/pom.xml
index af471f6..306219f 100644
--- a/presto-cli/pom.xml
+++ b/presto-cli/pom.xml
@@ -117,6 +117,7 @@
                             <goal>shade</goal>
                         </goals>
                         <configuration>
+                            <createDependencyReducedPom>false</createDependencyReducedPom>
                             <shadedArtifactAttached>true</shadedArtifactAttached>
                             <shadedClassifierName>executable</shadedClassifierName>
                             <transformers>
@@ -137,6 +138,7 @@
                 <configuration>
                     <flags>-Xmx1G</flags>
                     <classifier>executable</classifier>
+                    <programFile>${project.artifactId}.jar</programFile>
                 </configuration>
                 <executions>
                     <execution>
diff --git a/presto-main/etc/config.properties b/presto-main/etc/config.properties
index 00856c4..b24d009 100644
--- a/presto-main/etc/config.properties
+++ b/presto-main/etc/config.properties
@@ -21,11 +21,16 @@ query.max-age=30m
 
 plugin.bundles=\
   ../presto-raptor/pom.xml,\
-  ../presto-hive-cdh4/pom.xml,\
+  ../presto-hive-hadoop2/pom.xml,\
   ../presto-example-http/pom.xml,\
   ../presto-kafka/pom.xml, \
-  ../presto-tpch/pom.xml
+  ../presto-tpch/pom.xml,\
+  ../presto-cassandra/pom.xml,\
+  ../presto-mysql/pom.xml,\
+  ../presto-wrmsr-extensions/pom.xml
 
 presto.version=testversion
 experimental-syntax-enabled=true
 distributed-joins-enabled=true
+
+node-scheduler.multiple-tasks-per-node-enabled=true
diff --git a/presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java b/presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java
index aec57e9..4bbcd01 100644
--- a/presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java
+++ b/presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java
@@ -43,6 +43,7 @@ import io.airlift.log.Logger;
 import javax.annotation.PreDestroy;
 import javax.inject.Inject;
 
+import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -113,6 +114,11 @@ public class ConnectorManager
         }
     }
 
+    public Map<String, Connector> getConnectors()
+    {
+        return Collections.unmodifiableMap(connectors);
+    }
+
     public void addConnectorFactory(ConnectorFactory connectorFactory)
     {
         checkState(!stopped.get(), "ConnectorManager is stopped");
diff --git a/presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java b/presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java
index cd42f7b..d1f9921 100644
--- a/presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java
+++ b/presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java
@@ -360,7 +360,7 @@ public class NodeScheduler
 
             // if the chosen set is empty and the hint includes the coordinator,
             // force pick the coordinator
-            if (chosen.isEmpty() && !includeCoordinator) {
+            if (chosen.isEmpty() && includeCoordinator) {
                 HostAddress coordinatorHostAddress = nodeManager.getCurrentNode().getHostAndPort();
                 if (split.getAddresses().stream().anyMatch(host -> canSplitRunOnHost(split, coordinatorHostAddress, host))) {
                     chosen.add(nodeManager.getCurrentNode());
diff --git a/presto-main/src/main/java/com/facebook/presto/metadata/CatalogManager.java b/presto-main/src/main/java/com/facebook/presto/metadata/CatalogManager.java
index f107654..88cfc65 100644
--- a/presto-main/src/main/java/com/facebook/presto/metadata/CatalogManager.java
+++ b/presto-main/src/main/java/com/facebook/presto/metadata/CatalogManager.java
@@ -81,7 +81,7 @@ public class CatalogManager
         Map<String, String> properties = new HashMap<>(loadProperties(file));
 
         String connectorName = properties.remove("connector.name");
-        checkState(connectorName != null, "Catalog configuration %s does not contain conector.name", file.getAbsoluteFile());
+        checkState(connectorName != null, "Catalog configuration %s does not contain connector.name", file.getAbsoluteFile());
 
         String catalogName = Files.getNameWithoutExtension(file.getName());
 
diff --git a/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java b/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java
index 989ad6b..69a3e64 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java
@@ -51,12 +51,14 @@ import java.util.List;
 import java.util.Map;
 import java.util.ServiceLoader;
 import java.util.TreeMap;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 @ThreadSafe
 public class PluginManager
+        implements ServerEvent.Listener
 {
     private static final List<String> HIDDEN_CLASSES = ImmutableList.<String>builder()
             .add("org.slf4j")
@@ -84,6 +86,7 @@ public class PluginManager
     private final Map<String, String> optionalConfig;
     private final AtomicBoolean pluginsLoading = new AtomicBoolean();
     private final AtomicBoolean pluginsLoaded = new AtomicBoolean();
+    private final List<ServerEvent.Listener> serverEventListeners = new CopyOnWriteArrayList<>();
 
     @Inject
     public PluginManager(Injector injector,
@@ -129,6 +132,14 @@ public class PluginManager
         return pluginsLoaded.get();
     }
 
+    @Override
+    public void onServerEvent(ServerEvent event)
+    {
+        for (ServerEvent.Listener listener : serverEventListeners) {
+            listener.onServerEvent(event);
+        }
+    }
+
     public void loadPlugins()
             throws Exception
     {
@@ -206,6 +217,11 @@ public class PluginManager
             log.info("Registering functions from %s", functionFactory.getClass().getName());
             metadata.addFunctions(functionFactory.listFunctions());
         }
+
+        for (ServerEvent.Listener serverEventListener : plugin.getServices(ServerEvent.Listener.class)) {
+            log.info("Registering server event listener %s", serverEventListener.getClass().getName());
+            serverEventListeners.add(serverEventListener);
+        }
     }
 
     private URLClassLoader buildClassLoader(String plugin)
diff --git a/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java b/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java
index 51bc1fb..d36f774 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java
@@ -22,7 +22,9 @@ import com.google.common.base.Joiner;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
 import com.google.inject.Injector;
+import com.google.inject.Key;
 import com.google.inject.Module;
+import com.google.inject.TypeLiteral;
 import io.airlift.bootstrap.Bootstrap;
 import io.airlift.discovery.client.Announcer;
 import io.airlift.discovery.client.DiscoveryModule;
@@ -102,10 +104,20 @@ public class PrestoServer
         try {
             Injector injector = app.strictConfig().initialize();
 
+            Iterable<ServerEvent.Listener> listeners = injector.getInstance(Key.get(new TypeLiteral<Set<ServerEvent.Listener>>() {}));
+
             injector.getInstance(PluginManager.class).loadPlugins();
 
+            for (ServerEvent.Listener listener : listeners) {
+                listener.onServerEvent(new ServerEvent.PluginsLoaded());
+            }
+
             injector.getInstance(CatalogManager.class).loadCatalogs();
 
+            for (ServerEvent.Listener listener : listeners) {
+                listener.onServerEvent(new ServerEvent.ConnectorsLoaded());
+            }
+
             // TODO: remove this huge hack
             updateDatasources(
                     injector.getInstance(Announcer.class),
diff --git a/presto-main/src/main/java/com/facebook/presto/server/ServerEvent.java b/presto-main/src/main/java/com/facebook/presto/server/ServerEvent.java
new file mode 100644
index 0000000..5644f61
--- /dev/null
+++ b/presto-main/src/main/java/com/facebook/presto/server/ServerEvent.java
@@ -0,0 +1,32 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.server;
+
+public abstract class ServerEvent
+{
+    public interface Listener
+    {
+        default void onServerEvent(ServerEvent event)
+        {
+        }
+    }
+
+    public static final class PluginsLoaded extends ServerEvent
+    {
+    }
+
+    public static final class ConnectorsLoaded extends ServerEvent
+    {
+    }
+}
diff --git a/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java b/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java
index 460c120..9e59b42 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java
@@ -297,9 +297,12 @@ public class ServerMainModule
                     config.setRequestTimeout(new Duration(10, SECONDS));
                 });
 
+        newSetBinder(binder, new TypeLiteral<ServerEvent.Listener>() {});
+
         // plugin manager
         binder.bind(PluginManager.class).in(Scopes.SINGLETON);
         configBinder(binder).bindConfig(PluginManagerConfig.class);
+        newSetBinder(binder, new TypeLiteral<ServerEvent.Listener>() {}).addBinding().to(PluginManager.class);
 
         // optimizers
         binder.bind(new TypeLiteral<List<PlanOptimizer>>() {}).toProvider(PlanOptimizersFactory.class).in(Scopes.SINGLETON);
diff --git a/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java b/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java
index 9f145fc..b4b8e18 100644
--- a/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java
+++ b/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java
@@ -228,6 +228,11 @@ public class LocalQueryRunner
         connectorManager.createConnection(catalogName, connectorFactory, properties);
     }
 
+    public ConnectorManager getConnectorManager()
+    {
+        return connectorManager;
+    }
+
     @Override
     public void installPlugin(Plugin plugin)
     {
diff --git a/presto-server/src/main/provisio/presto.xml b/presto-server/src/main/provisio/presto.xml
index 4bee857..5848b77 100644
--- a/presto-server/src/main/provisio/presto.xml
+++ b/presto-server/src/main/provisio/presto.xml
@@ -38,6 +38,7 @@
         </artifact>
     </artifactSet>
 
+    <!--
     <artifactSet to="plugin/hive-cdh4">
         <artifact id="${project.groupId}:presto-hive-cdh4:zip:${project.version}">
             <unpack />
@@ -55,6 +56,7 @@
             <unpack />
         </artifact>
     </artifactSet>
+    -->
 
     <artifactSet to="plugin/hive-hadoop2">
         <artifact id="${project.groupId}:presto-hive-hadoop2:zip:${project.version}">
@@ -97,4 +99,16 @@
             <unpack />
         </artifact>
     </artifactSet>
+
+    <artifactSet to="plugin/elasticsearch">
+        <artifact id="com.wrmsr.presto:presto-wrmsr-elasticsearch:jar:${project.version}">
+            <unpack />
+        </artifact>
+    </artifactSet>
+
+    <artifactSet to="plugin/extensions">
+        <artifact id="com.wrmsr.presto:presto-wrmsr-extensions:jar:${project.version}">
+            <unpack />
+        </artifact>
+    </artifactSet>
 </runtime>
diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/block/BlockBuilder.java b/presto-spi/src/main/java/com/facebook/presto/spi/block/BlockBuilder.java
index 2f04d87..b427317 100644
--- a/presto-spi/src/main/java/com/facebook/presto/spi/block/BlockBuilder.java
+++ b/presto-spi/src/main/java/com/facebook/presto/spi/block/BlockBuilder.java
@@ -54,7 +54,7 @@ public interface BlockBuilder
     BlockBuilder writeBytes(Slice source, int sourceIndex, int length);
 
     /**
-     * Write a byte to the current entry;
+     * Close the current entry;
      */
     BlockBuilder closeEntry();
